{"ast":null,"code":"var _jsxFileName = \"/Users/DorinsMac/Desktop/Projects/Typescript React Project.nosync/client/src/components/InputField.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input } from '@chakra-ui/core';\nimport React from 'react';\nimport { useField } from 'formik';\nexport const InputField = props => {\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, props.label), __jsx(Input, _extends({}, field, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 22\n    }\n  }, error) : null);\n};","map":{"version":3,"sources":["/Users/DorinsMac/Desktop/Projects/Typescript React Project.nosync/client/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","React","useField","InputField","props","field","error","name","label","placeholder"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,SAAxC,EAAmDC,KAAnD,QAAgE,iBAAhE;AACA,OAAOC,KAAP,MAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AAQA,OAAO,MAAMC,UAAqC,GAAIC,KAAD,IAAW;AAC5D,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBJ,QAAQ,CAACE,KAAD,CAAnC;AAEA,SACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCH,KAAK,CAACI,KAAvC,CADJ,EAEI,MAAC,KAAD,eAAWH,KAAX;AAAkB,IAAA,EAAE,EAAEA,KAAK,CAACE,IAA5B;AAAkC,IAAA,WAAW,EAAEH,KAAK,CAACK,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKH,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAH5D,CADJ;AAOH,CAVM","sourcesContent":["import { FormControl, FormErrorMessage, FormLabel, Input } from '@chakra-ui/core'\nimport React, { InputHTMLAttributes } from 'react'\nimport { useField } from 'formik'\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n    label: string\n    name: string\n    placeholder?: string\n}\n\nexport const InputField: React.FC<InputFieldProps> = (props) => {\n    const [field, { error }] = useField(props)\n\n    return (\n        <FormControl isInvalid={!!error}>\n            <FormLabel htmlFor={field.name}>{props.label}</FormLabel>\n            <Input {...field} id={field.name} placeholder={props.placeholder} />\n            {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n        </FormControl>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}